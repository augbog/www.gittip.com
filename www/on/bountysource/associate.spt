"""Associate a Bountysource account with a Gittip account.

First, must receive token from Bountysource by authorizing the application.
"""
from urllib import urlencode

from aspen import resources, Response
from gittip.elsewhere import bountysource
from gittip.models._mixin_elsewhere import NeedConfirmation

[-----------------------------]

if user.ANON:
    raise Response(404)

# Did something go wrong with account link at Bountysource?
# If so, redirect to a failure page with an error message.
if 'error' in qs:
    new_qs = urlencode({'msg': qs['error']})
    request.redirect('/on/bountysource/failure.html?%s' % new_qs)

# Gittip generated access token, passed all the way through the auth process
token = qs.get('access_token', '')

# find participant from Bountysource created access token.
# it better be the logged in user, dammit.
participant = bountysource.get_participant_via_access_token(token)

if not participant or participant != user.participant:

    # This will be the case if the user clicks the 'Reject' button
    # on the Bountysource account authorize screen.

    request.redirect('/%s/' % user.participant.username)

else:

    # For other accounts elsewhere we have multiple possible actions at this
    # point: opt-in, connect, lock, unlock. Our use of Bountysource is more
    # limited, so here we basically just have a "connect" action always.

    # pull user_info from the querystring(!) rather than (as we do elsewhere)
    # a second HTTP call
    user_info = bountysource.filter_user_info(qs)

    # create a linked account
    account = bountysource.BountysourceAccount(user_info['id'], user_info)

    # associate with the Gittip participant
    try:
        user.participant.take_over(account)
    except NeedConfirmation, obstacles:

        # XXX Eep! Internal redirect! Really?!
        request.internally_redirected_from = request.fs
        request.fs = website.www_root + '/on/confirm.html.spt'
        request.resource = resources.get(request)

        raise request.resource.respond(request)
    else:
        del account

    request.redirect('/%s/' % user.participant.username)

[-----------------------------] text/plain
